pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/henisahar/automation-test-selenium.git' // Update with your repository URL
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                   dockerImage = docker.build("saharheni/selenium-tests:${env.BUILD_ID}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        dockerImage.push("${env.BUILD_ID}")
                        dockerImage.push("latest")
                    }
                }
            }
        }
        stage('Run SonarQube Scanner') {
            steps {
                script {
                    docker.image("sonarsource/sonar-scanner-cli:latest").inside {
                        // Run sonar-scanner without using `nohup`
                        sh 'sonar-scanner'
                    }
                }
            }
        }
        stage('Update GitHub Status') {
            steps {
                script {
                    def status = currentBuild.result == 'SUCCESS' ? 'success' : 'failure'
                    step([
                        $class: 'GitHubCommitStatusSetter',
                        contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: 'ci/build'],
                        statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[status: status, state: status]]]
                    ])
                }
            }
        }
    }
    post {
        always {
            emailext(
                to: 'saharheni6@gmail.com, sahar.heni@ensi-uma.tn',
                subject: "Build ${currentBuild.fullDisplayName}",
                body: "Build ${currentBuild.fullDisplayName} finished with status: ${currentBuild.result}"
            )
        }
    }
}
